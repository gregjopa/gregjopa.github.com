{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/2020/03/integrating-vexflow-with-gatsby-js","result":{"data":{"post":{"__typename":"MdxPost","slug":"/2020/03/integrating-vexflow-with-gatsby-js","title":"Integrating Vexflow with Gatsby.js","date":"03.18.2020","tags":[{"name":"Gatsby.js","slug":"gatsby-js"},{"name":"Vexflow","slug":"vexflow"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Integrating Vexflow with Gatsby.js\",\n  \"slug\": \"2020/03/integrating-vexflow-with-gatsby-js\",\n  \"date\": \"2020-03-18T07:38:00.000Z\",\n  \"tags\": [\"Gatsby.js\", \"Vexflow\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"My new blog is built with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/\"\n  }), \"Gatsby.js\"), \" and my goal is to make easy to insert\\nsheet music and guitar tab into blog posts. I'm a big fan of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vexflow.com/\"\n  }), \"Vexflow Music Notation library\"), \"\\nand for this post I'm going to explain how I got Vexflow working with Gatsby.\"), mdx(\"h3\", null, \"Demo\"), mdx(\"p\", null, \"I struggled a bit with server-side rendering, but eventually got it working! Here's the end result:\"), mdx(VexflowDemo, {\n    width: \"700\",\n    height: \"180\",\n    mdxType: \"VexflowDemo\"\n  }), mdx(\"h3\", null, \"Integration Details\"), mdx(\"p\", null, \"There are 3 things I had to do to get Vexflow working with Gatsby.js.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jamiebuilds/react-loadable\"\n  }), \"react-loadable\"), \" - The Gatsby framework renders everything\\nserver-side and Vexflow does not play nicely by default. The Vexflow library depends on 'window' and several\\nother browser features. To work around this issue I used react-loadable to only load my VexflowDemo component on the client-side.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\"\\nimport Loadable from \\\"react-loadable\\\"\\n\\nexport default Loadable({\\n  // this \\\"./VexflowDemo\\\" component loads Vexflow and draws the sheet music\\n  loader: () => import(\\\"./VexflowDemo\\\"),\\n  loading() {\\n    return <div>Loading...</div>\\n  }\\n})\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/refs-and-the-dom.html\"\n  }), \"DOM Node Ref\"), \" - the Vexflow library takes care of the complex\\nrendering for creating sheet music. It just needs a specific container element to use. The 'ref' feature makes it easy to\\nshare the container element with Vexflow without having to hardcode any id values.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/hooks-effect.html\"\n  }), \"useEffect Hook\"), \" - the Vexflow rendering process requires\\na DOM node reference so we need to make sure the DOM is ready. With React, we can accomplish this using 'useEffect' or 'componentDidMount()'.\"))), mdx(\"p\", null, \"Here's a snippet showing how to use 'useEffect' with 'ref':\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function VexflowDemo(props) {\\n  const notesContainerRef = React.useRef(null)\\n\\n  useEffect(() => {\\n    if (notesContainerRef.current !== null) {\\n      // this draw() function contains all Vexflow code for rendering the sheet music\\n      draw(notesContainerRef.current, props)\\n    }\\n  })\\n\\n  return (\\n    <div ref={notesContainerRef} />\\n  )\\n}\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gregjopa/gregjopa.github.io/tree/source/content/posts/integrating-vexflow-with-gatsby-js\"\n  }), \"full source code for this blog post\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"My new blog is built with  Gatsby.js  and my goal is to make easy to insert\nsheet music and guitar tab into blog posts. I'm a big fan of theâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/2020/03/integrating-vexflow-with-gatsby-js","formatString":"MM.DD.YYYY"}}}